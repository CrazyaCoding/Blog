<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>panpan Shang</title>
 <link href="http://localhost:4000" rel="self"/>
 <link href="http://localhost:4000"/>
 <updated>2019-04-22T10:05:19+08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>shangpanpan</name>
   <email></email>
 </author>

 
 <entry>
   <title>Javascript是单线程</title>
   <link href="http://localhost:4000/%E6%B5%8F%E8%A7%88%E5%99%A8/2019/04/19/%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/%E6%B5%8F%E8%A7%88%E5%99%A8/2019/04/19/单线程</id>
   <content type="html">&lt;h2 id=&quot;javascript是单线程&quot;&gt;Javascript是单线程&lt;/h2&gt;
&lt;p&gt;Javascript引擎是单线程运行的，浏览器在什么时候，都且只有一个线程在运行javascript&lt;/p&gt;

&lt;p&gt;浏览器的内核是多线程的，它们在内核控制下相互配合以保持同步，一个浏览器至少实现三个常驻引擎：&lt;code class=&quot;highlighter-rouge&quot;&gt;javascript引擎线程&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;GUI渲染线程&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;浏览器事件触发线程&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;javascript引擎线程：是基于事件驱动单线程执行的，javascript引擎一直等待着任务队列中任务的到来，&lt;/li&gt;
  &lt;li&gt;GUI渲染线程：负责渲染浏览器界面，当界面需要重绘（Repaint）或者由于某种操作引发回流时，该线程就会执行。需要注意的是GUI与上面javascript引擎是互斥的，当javascript引擎执行时GUI线程就会被挂起，GUI更新会被保存在一个队列中，等到javascript引擎空闲时立即执行。&lt;/li&gt;
  &lt;li&gt;事件触发线程：当一个事件被触发时该线程会把事件添加到待处理队列的队尾，等待javascript引擎的处理，事件可以是setTimeout、ajax，也可来自浏览器内核的其他线程的鼠标点击，ajax异步请求等，所有这些事件都得排队等待javascript引擎处理&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>promise的深入学习</title>
   <link href="http://localhost:4000/js/2019/04/19/promise/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/js/2019/04/19/promise</id>
   <content type="html">&lt;h2 id=&quot;为什么会产生promise&quot;&gt;为什么会产生promise&lt;/h2&gt;
&lt;p&gt;目前，我们对于异步函数的处理均是来源于回调函数，与普通函数不同的是，回调函数的内容是异步操作完成后的后续逻辑，并被第三方调用&lt;/p&gt;

&lt;p&gt;以ajax为例子&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ajax.get('xxx', dataA =&amp;gt; {
    ajax.get('yyy', dataB =&amp;gt; {
        //handle
    })
})
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这样一来，在处理越来越多的异步逻辑时，回调也就越深
会产生如下几个问题：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;代码逻辑书写顺序与执行顺序不一致，不利于阅读与维护&lt;/li&gt;
  &lt;li&gt;异步操作的顺序变更时，需要大规模的代码重构&lt;/li&gt;
  &lt;li&gt;回掉函数基本都是匿名函数，bug追踪困难&lt;/li&gt;
  &lt;li&gt;回调函数是被第三方库代码调用，而非自己的业务代码所调用，造成了控制反转&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中，最后一个问题是编码中的最大的问题，由于回掉函数是被第三方库调用的，因此无法预期自己被执行时的环境，可能会导致：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;回调被执行了多次&lt;/li&gt;
  &lt;li&gt;回调一次都没有被执行&lt;/li&gt;
  &lt;li&gt;回调不是异步执行而是被同步执行&lt;/li&gt;
  &lt;li&gt;回调被过早执行或过晚执行&lt;/li&gt;
  &lt;li&gt;回调中的报错被第三方吞噬掉&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上述为例，基于promise的例子是这样的&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    function getDataA(){
        return new Promise((resolve, reject) =&amp;gt; {
            ajax.get('xxx', dataA =&amp;gt; {
                resolve(dataA)
            })
        })
    }
    function getDataB(dataA){
        return new Promise((resolve, reject) =&amp;gt; {
            ajax.get('xxx'+dataA, dataB =&amp;gt; {
                resolve(dataB)
            })
    }
    getDataA()
    .then(dataA =&amp;gt; {getDataB(dataA)})
    .then(dataB =&amp;gt; console.log(dataB))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;基础概念&quot;&gt;基础概念&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;在上面的例子中，其实promise充当了一个中间机的作用，将回调造成的控制反转再反转回去。
在promise的例子中，控制流分成了两个部分，触发异步钱的逻辑通过new传入promise，而异步操作完成后的逻辑则传入promise的then接口中，通过这种方式，第一方业务和第三方库的响应逻辑都由primise来调用，进而在promise中解决异步变成可能出现 ## API 一个promise有以下几种状态 * pending: 初始状态，成功或失败状态 * fulfilled: 意味这操作成功完成 * rejected: 意味着操作失败
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://mdn.mozillademos.org/files/8633/promises.png&quot;&gt;看这样一张图&lt;/a&gt;
&lt;img src=&quot;https://mdn.mozillademos.org/files/8633/promises.png&quot; alt=&quot;promise&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;属性&quot;&gt;属性&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.length&lt;/code&gt; length属性，其值总是为1（构造器参数的数目）
&lt;code class=&quot;highlighter-rouge&quot;&gt;Promise.prototype&lt;/code&gt; 表示Promise构造器的原型&lt;/p&gt;

&lt;h3 id=&quot;方法&quot;&gt;方法&lt;/h3&gt;

&lt;h4 id=&quot;promisealliterable&quot;&gt;Promise.all(iterable)&lt;/h4&gt;
&lt;p&gt;用于将多个Promise实例，包装成一个新的Promise实例&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const p = Promise.all([p1, p2, p3]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise.all方法接受一个数组作为参数，p1, p2, p3都是Promise实例，如果不是，就会调用Promise.resolve方法，转为Promise实例，再进一步处理。（Promise.all方法的参数可以不是数组，但必须具有Iterator接口，且返回的每个成员都是Promise实例）
p的状态由p1,p2,p3决定，分两种情况
1. 只有p1, p2, p3的状态都变成fulfilled, p的状态才会变成fulfilled，此时，p1, p2, p3的返回值组成一个数组，传递给p的回调函数
2. 只要p1, p2, p3之中有一个被rejected，p的状态就变成rejected，此时，第一个被reject的实例的返回值，会传递给p的回掉函数
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;例子见：./demo/promise.all.1.js&lt;/p&gt;

&lt;p&gt;如果作为参数的Promise实例，自己定义了catch方法，那么它一旦被rejected，就不会触发Promise.all的catch方法
见：./demo/promise.all.2.js&lt;/p&gt;

&lt;h4 id=&quot;promiseraceiterable&quot;&gt;Promise.race(iterable)&lt;/h4&gt;
&lt;p&gt;该方法同样是将多个Promise实例，包装成一个新的Promise实例&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const p = new Promise.race([p1, p2, p3]);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么上面代码中，只要p1,p2,p3之中有一个实例率先改变状态，p的状态就跟着改变，那个率先改变状态的promise的返回值，就作为参数传递给p的回掉函数
如果参数不是Promise的实例，就会调用Promise.resolve方法，转为Promise实例
见Promise.race.js&lt;/p&gt;

&lt;h4 id=&quot;promiseresolve&quot;&gt;Promise.resolve()&lt;/h4&gt;
&lt;p&gt;有时需要将现有对象转为Promise对象，该方法就起到这个作用&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const jsPromise = Promise.resolve($.ajax('./whatever.json'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise.resolve('foo');
// 等价于
new Promise(resolve =&amp;gt; resolve('foo'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Promise.resolve的参数分成四种情况
（1）参数是一个promise实例
    如果参数本身就是Promise实例，那么Promise.resolve将不做任何修改，直接返回实例
（2）参数是一个thenable对象
    thenable对象值的就是具有then方法的对象
    let thenable = {
        then: function(resolve){
            resolve(1);
        }
    }
    let p1 = Promise.resolve(thenable); //会转换完并执行then方法后在返回
    p1.then(function(value){
        console.log(value);  //1
    })
    
（3）参数不是具有then方法的对象，或根本不是对象
    const p = Promise.resolve('hello');
    p.then(function(e){
        console.log(e); //hello
    })

(4) 不带有任何参数
    直接返回一个Promise对象，但是需要注意的是，即使是立即执行的，也会排在当前的事件队列后面，是在本轮&quot;事件循环&quot;（event loop）结束时，而不是在下一轮&quot;事件循环&quot;的开始时。
    setTimeout(function(){
        console.log('3');
    }, 0);
    Promise.resolve().then(function(){
        console.log(2);
    });
    console.log(1);
    // 1
    // 2
    // 3
    setTimeout(fn, 0)在下一轮&quot;事件循环&quot;开始时执行，
    Promise.resolve()在本轮 &quot;事件循环&quot; 结束时开始执行
    console.log('1') 时立即执行
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;promiserejected&quot;&gt;Promise.rejected()&lt;/h4&gt;
&lt;p&gt;Promise.rejected方法也会返沪一个新的Promise实例，该实例的状态为rejected&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const p = new Promise.rejected('出错了')
// 等价于
const p = new Promise((resolve, rejected) =&amp;gt; rejected('出错了'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;那么，Promise.rejected()方法的参数，会原封不动的作为reject的理由，变成后续的参数，这一点与Promise.resolve不一致&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const thenable = {
    then: function(resolve, reject){
        reject('出错了');
    }
}

Promise.reject(thenable).cathch(e =&amp;gt; {
    console.log(e === thenable); //true
})

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;源码重写&quot;&gt;源码重写&lt;/h2&gt;

&lt;h2 id=&quot;参考&quot;&gt;参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://ewind.us/2017/promise-implementing/&quot;&gt;promise源码阅读&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Position</title>
   <link href="http://localhost:4000/css/2019/04/19/position/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/css/2019/04/19/position</id>
   <content type="html">&lt;h2 id=&quot;概念&quot;&gt;概念&lt;/h2&gt;
&lt;p&gt;MDN&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;用于指定一个元素在文档中的定位方式。top, right, bottom 和 left 属性则决定了该元素的最终位置。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;w3school&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;这个属性定义建立元素布局所用的定位机制。任何元素都可以定位，不过绝对或固定元素会生成一个块级框，而不论该元素本身是什么类型。相对定位元素会相对于它在正常流中的默认位置偏移。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;取值&quot;&gt;取值&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;: 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声明）。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;inherit&lt;/code&gt;: 规定应该从父元素继承 position 属性的值。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;relative&lt;/code&gt;: 生成相对定位的元素，相对于其正常位置进行定位。因此，”left:20” 会向元素的 LEFT 位置添加 20 像素。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;absolute&lt;/code&gt;: 生成绝对定位的元素，相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fixed&lt;/code&gt;: 生成绝对定位的元素，相对于浏览器窗口进行定位。元素的位置通过 “left”, “top”, “right” 以及 “bottom” 属性进行规定。&lt;/p&gt;

&lt;h2 id=&quot;问题&quot;&gt;问题&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;设置position属性的top left等属性的百分比是相对于谁的&lt;/li&gt;
  &lt;li&gt;设置为relative元素后，会不会把兄弟元素挤走&lt;/li&gt;
  &lt;li&gt;设置为relative的元素脱离文档流了吗&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;解答&quot;&gt;解答&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;相对于父元素&lt;/li&gt;
  &lt;li&gt;不会，是在本身的位置去偏移，只会造成重叠，对其他元素不造成影响&lt;/li&gt;
  &lt;li&gt;不脱离 absolute fixed会早成脱离文档流&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Float</title>
   <link href="http://localhost:4000/css/2019/04/19/float/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/css/2019/04/19/float</id>
   <content type="html">&lt;h3 id=&quot;学习的过程&quot;&gt;学习的过程&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;带着问题去学习&lt;/li&gt;
  &lt;li&gt;针对每个问题测试答案&lt;/li&gt;
  &lt;li&gt;带着答案分析结果&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;问题&quot;&gt;问题&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;概念&lt;/li&gt;
  &lt;li&gt;可设置的值？&lt;/li&gt;
  &lt;li&gt;float的元素是脱离文档流的吗？&lt;/li&gt;
  &lt;li&gt;float后的元素占据空间吗？&lt;/li&gt;
  &lt;li&gt;float元素的宽高 等百分比是相对于谁的？&lt;/li&gt;
  &lt;li&gt;float的文字可以围绕他是因为什么？&lt;/li&gt;
  &lt;li&gt;浮动非替换元素不给宽度尽可能窄是什么意思？&lt;/li&gt;
  &lt;li&gt;设置了float的元素拥有包含块，可以设置宽高吗？&lt;/li&gt;
  &lt;li&gt;浮动的”包裹性”&lt;/li&gt;
  &lt;li&gt;浮动的”破坏性”&lt;/li&gt;
  &lt;li&gt;去浮动的几种方法及原理？&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;正文&quot;&gt;正文&lt;/h3&gt;

&lt;h4 id=&quot;概念&quot;&gt;概念&lt;/h4&gt;
&lt;p&gt;float 
MDN&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;CSS属性指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。该元素从网页的正常流动中移除，尽管仍然保持部分的流动性（与绝对定位相反）。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;w3school&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;float属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在CSS中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。
 如果浮动非替换元素，则要指定一个明确的宽度；否则，它们会尽可能地窄。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可设置的值
&lt;code class=&quot;highlighter-rouge&quot;&gt;left&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;right&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;none&lt;/code&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;inerit&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1.float的元素是脱离文档流的吗？&lt;br /&gt;
是，浮动元素会从普通文档流中脱离，但浮动元素影响的不仅是自己，还会影响其周围的元素对其进行围绕
当元素应用了float属性后，将会脱离普通流，其容器（父）元素将得不到脱离普通流的子元素高度。导致父元素塌陷&lt;/p&gt;

&lt;p&gt;2.float后的元素占据空间吗？&lt;/p&gt;

&lt;p&gt;占据 同position:relative一样&lt;/p&gt;

&lt;p&gt;3.float元素的宽高 等百分比是相对于谁的？&lt;/p&gt;

&lt;p&gt;相对于父元素&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;float的文字可以围绕他是因为什么？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;float元素特有的围绕性，设置了float属性的元素会影响周围元素及使父元素塌陷&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浮动非替换元素不给宽度尽可能窄是什么意思？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;设置了float属性的元素（非替换），在自己的周围生成一圈包含块，如果不给他设置宽，会以内容的宽度为准，因为替换元素本身有宽度属性，所以不受影响&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;设置了float的元素拥有包含块，可以设置宽高吗？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以
测试的span对象，在设置float之后，宽高设置生效&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浮动的”包裹性”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在某种意义上，设置了float的元素与设置了display:inline-block的作用是一样的，只是float可以设置方向，有方向性
所以有的时候display:block float:left 这种代码大部分都是无意义的 display:block可以去掉&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;浮动的”破坏性”&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在设置了float之后，会破坏line-height 及基线（inline-box的概念，看着有点蒙，后续继续跟进）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;去浮动的几种方法及原理？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;增加div，设置clear:both
最简单的办法，哪里有浮动，就在其父元素内部增加一个div，作为最后一个子元素
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;div style=&quot;clear:both&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;
优点：简单易懂
缺点：增加额外的无意义div标签，没有语意化&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;父元素添加overflow:hidden&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这个方法的关键在于，触发了BFC
优点：代码量少
缺点：如果子元素超出父元素，会造成超出部分被隐藏&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;after伪元素&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;通过它设置一个具有clear:both的伪元素
优点：原理同第一个方法，不增加额外的标签
缺点：稍显复杂&lt;/p&gt;

&lt;h3 id=&quot;应用&quot;&gt;应用&lt;/h3&gt;
&lt;p&gt;文字环绕
横向菜单排列
布局&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Firstarticle</title>
   <link href="http://localhost:4000/2019/04/19/firstArticle/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/2019/04/19/firstArticle</id>
   <content type="html">&lt;h1 id=&quot;标题&quot;&gt;标题&lt;/h1&gt;
&lt;p&gt;纪念一下，看能坚持多久，哈哈哈&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>BFC</title>
   <link href="http://localhost:4000/css/2019/04/19/bfc/"/>
   <updated>2019-04-19T00:00:00+08:00</updated>
   <id>http://localhost:4000/css/2019/04/19/bfc</id>
   <content type="html">&lt;h1 id=&quot;概念&quot;&gt;概念&lt;/h1&gt;
&lt;p&gt;MDN&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;一个块格式化上下文（block formatting context）是Web页面的可视化CSS渲染出的一部分。它是块级盒布局出现的区域，也是浮动层元素进行交互的区域。
W3C
BFC (Block Formattng Context)块圾格式上下文，是web页面中盒模型布局的css渲染模式，它的定位体系属于常规文档流。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个块格式化上下文由以下之一创建：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根元素或其它包含它的元素&lt;/li&gt;
  &lt;li&gt;浮动元素 (元素的 float 不是 none)&lt;/li&gt;
  &lt;li&gt;绝对定位元素 (元素的 position 为 absolute 或 fixed)&lt;/li&gt;
  &lt;li&gt;内联块 (元素具有 display: inline-block)&lt;/li&gt;
  &lt;li&gt;表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性)&lt;/li&gt;
  &lt;li&gt;表格标题 (元素具有 display: table-caption, HTML表格标题默认属性)&lt;/li&gt;
  &lt;li&gt;具有overflow 且值不是 visible 的块元素，&lt;/li&gt;
  &lt;li&gt;display: flow-root&lt;/li&gt;
  &lt;li&gt;column-span: all 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一个块格式化上下文包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。&lt;/p&gt;

&lt;p&gt;块格式化上下文对于定位 (参见 float) 与清除浮动 (参见 clear) 很重要。定位和清除浮动的样式规则只适用于处于同一块格式化上下文内的元素。浮动不会影响其它块格式化上下文中元素的布局，并且清除浮动只能清除同一块格式化上下文中在它前面的元素的浮动。&lt;/p&gt;

&lt;h1 id=&quot;如何形成的&quot;&gt;如何形成的&lt;/h1&gt;
&lt;p&gt;浮动，绝对定位元素，inline-blocks,table-cells,table-captions,和overflow的值不为visible的元素，（除了这个值已经被传到了视口的时候）将创建一个新的块级格式化上下文。
举例说明能够生成一个新的BFC的例子：
float的值不为none
position的值不为relative或者static
display的值为table-cell table-caption inline-block flex 或者inline-flex中的一个
overflow不为visible&lt;/p&gt;

&lt;h1 id=&quot;bfc导致的外边距重叠&quot;&gt;BFC导致的外边距重叠&lt;/h1&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//见index.html&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;盒子&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;盒子&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;盒子&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*仅仅用作形成一个BFC*/&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rebeccapurple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;salmon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/style&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 结果就是两个子div之间的间距变成 10px 而不是叠加的20px 被成为外边距重叠&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 这样的情况仅仅发生在两个相邻的块级盒子在同一个BFC中才会发生，所以如果处于不同的BFC就不会发生外边距重叠&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 所以，解决办法就是制造一个新的BFC块&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;box&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bfc2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;p3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/p&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bfc2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;overflow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hidden&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 结果就是p3 与p2之间的距离变为20px&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;为了清除浮动创建的bfc&quot;&gt;为了清除浮动创建的BFC&lt;/h1&gt;
&lt;p&gt;通常情况下，容器内部含有浮动元素，导致容器没有高度变成塌陷了
可以通过创建一个BFC来解决这个问题，计算BFC高度的时候，浮动元素的高度也计算在内&lt;/p&gt;

&lt;h1 id=&quot;使用bfc来阻止文字环绕&quot;&gt;使用BFC来阻止文字环绕&lt;/h1&gt;
&lt;p&gt;原理是BFC的元素的左边总是与包含快的左边相接触
见index3.html
给p标签增加overflow: hidden 创建一个新的BFC，生成新的包含快，BFC的定义是左边与包含快的左边紧紧相接触，所以文字环绕现象消除&lt;/p&gt;

&lt;h1 id=&quot;参考&quot;&gt;参考&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context&quot;&gt;MDN-BFC&lt;/a&gt;
&lt;a href=&quot;https://www.w3cplus.com/css/understanding-block-formatting-contexts-in-css.html&quot;&gt;BFC&lt;/a&gt;&lt;/p&gt;
</content>
 </entry>
 

</feed>
